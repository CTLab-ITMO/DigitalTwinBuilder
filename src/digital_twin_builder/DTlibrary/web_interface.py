import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import json
from cores.database import DatabaseManager
from cores.sensor_manager import SensorManager
from agents.user_interaction_agent import UserInteractionAgent
from agents.database_agent import DatabaseAgent
from agents.digital_twin_agent import DigitalTwinAgent


class DigitalTwinInterface:
    def __init__(self):
        self.ui_agent = UserInteractionAgent()
        self.db_agent = DatabaseAgent()
        self.dt_agent = DigitalTwinAgent()
        self.sensor_manager = None
        self.db_manager = None
        if 'twin_initialized' not in st.session_state:
            st.session_state.twin_initialized = False

        if 'temperature_history' not in st.session_state:
            st.session_state.temperature_history = []
            
        if 'vibration_history' not in st.session_state:
            st.session_state.vibration_history = []
        
        self.setup_ui()


    def setup_ui(self):
        st.set_page_config(page_title="Digital Twin Builder", layout="wide")
        st.title("Digital Twin Builderüè≠")
        
        self.tab1, self.tab2, self.tab3, self.tab4 = st.tabs([
            "–ò–Ω—Ç–µ—Ä–≤—å—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", 
            "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", 
            "–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫",
            "–û–±–∑–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–∞—Ç—á–∏–∫–æ–≤"
        ])
        
        with self.tab1:
            self.setup_interview_tab()
        with self.tab2:
            self.setup_database_tab()
        with self.tab3:
            self.setup_twin_tab()
        with self.tab4:
            self.setup_sensor_tab()

    def setup_interview_tab(self):
        st.header("–°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
        
        if 'chat_history' not in st.session_state:
            st.session_state.chat_history = []
            initial_message = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
            
            1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–∫—Ç–∞
            2. –¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞
            3. –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            4. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –∏ —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            5. –û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞."""
            
            st.session_state.chat_history.append({"role": "bot", "content": initial_message})
            st.session_state.interview_completed = False
        
        for message in st.session_state.chat_history:
            if message["role"] == "bot":
                with st.chat_message("assistant"):
                    st.markdown(message["content"])
            else:
                with st.chat_message("user"):
                    st.markdown(message["content"])
        
        if not st.session_state.get('interview_completed', False):
            user_input = st.chat_input("–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ...")
            
            if user_input:
                st.session_state.chat_history.append({"role": "user", "content": user_input})
                
                st.session_state.interview_result = {
                    "system_description": user_input,
                    "status": "completed"
                }
                
                bot_response = "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ! –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º—ã —Å–æ–∑–¥–∞–¥–∏–º —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –≤–∞—à–µ–≥–æ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –≤–∫–ª–∞–¥–∫–µ 'Database Configuration' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
                st.session_state.chat_history.append({"role": "bot", "content": bot_response})
                st.session_state.interview_completed = True
                
                st.rerun()
        else:
            st.success("–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–µ.")
            
            with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                st.write(st.session_state.interview_result)

    def setup_database_tab(self):
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        if 'interview_result' not in st.session_state:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ò–Ω—Ç–µ—Ä–≤—å—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'")
            return
        
        example_schema = {
            "tables": [
                {
                    "name": "sensor_data",
                    "columns": [
                        {"name": "id", "type": "SERIAL", "constraints": "PRIMARY KEY"},
                        {"name": "timestamp", "type": "TIMESTAMP", "constraints": "NOT NULL"},
                        {"name": "furnace_id", "type": "VARCHAR(20)"},
                        {"name": "temperature", "type": "FLOAT"},
                        {"name": "power_consumption", "type": "FLOAT"},
                        {"name": "vibration_level", "type": "FLOAT"},
                        {"name": "chemical_composition", "type": "JSON"}
                    ]
                },
                {
                    "name": "equipment_status",
                    "columns": [
                        {"name": "id", "type": "SERIAL", "constraints": "PRIMARY KEY"},
                        {"name": "timestamp", "type": "TIMESTAMP", "constraints": "NOT NULL"},
                        {"name": "equipment_type", "type": "VARCHAR(50)"},
                        {"name": "status", "type": "VARCHAR(20)"},
                        {"name": "wear_level", "type": "FLOAT"},
                        {"name": "maintenance_due", "type": "DATE"}
                    ]
                },
                {
                    "name": "production_quality",
                    "columns": [
                        {"name": "id", "type": "SERIAL", "constraints": "PRIMARY KEY"},
                        {"name": "batch_id", "type": "VARCHAR(30)"},
                        {"name": "steel_grade", "type": "VARCHAR(20)"},
                        {"name": "defect_count", "type": "INTEGER"},
                        {"name": "quality_score", "type": "FLOAT"}
                    ]
                }
            ],
            "relationships": [
                "FOREIGN KEY (furnace_id) REFERENCES equipment_status(id)",
                "FOREIGN KEY (batch_id) REFERENCES production_quality(id)"
            ]
        }
        
        if 'db_schema' not in st.session_state:
            st.session_state.db_schema = example_schema
        
        st.subheader("–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
        st.info(st.session_state.interview_result["system_description"])
        
        st.subheader("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        st.json(example_schema, expanded=True)
        
        st.success("–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞.")
        
        with st.expander("–í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã"):
            st.markdown("""
            ### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
            
            **1. –¢–∞–±–ª–∏—Ü–∞ steel_melting_data (–¥–∞–Ω–Ω—ã–µ –ø–ª–∞–≤–∫–∏):**
            - `timestamp`: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            - `furnace_id`: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∏
            - `temperature`: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ø–µ—á–∏ (¬∞C)
            - `power_consumption`: –ü–æ—Ç—Ä–µ–±–ª—è–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)
            - `vibration_level`: –£—Ä–æ–≤–µ–Ω—å –≤–∏–±—Ä–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            - `chemical_composition`: –•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ —Å—Ç–∞–ª–∏ (JSON)
            
            **2. –¢–∞–±–ª–∏—Ü–∞ equipment_status (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è):**
            - `timestamp`: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            - `equipment_type`: –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–ø–µ—á—å, –∫–æ–Ω–≤–µ–π–µ—Ä –∏ —Ç.–¥.)
            - `status`: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å (—Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ)
            - `wear_level`: –£—Ä–æ–≤–µ–Ω—å –∏–∑–Ω–æ—Å–∞ (0-1)
            - `maintenance_due`: –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            
            **3. –¢–∞–±–ª–∏—Ü–∞ production_quality (–∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏):**
            - `batch_id`: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞—Ä—Ç–∏–∏
            - `steel_grade`: –ú–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏
            - `defect_count`: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤
            - `quality_score`: –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (0-100%)
            
            **–°–≤—è–∑–∏:**
            - –ü–ª–∞–≤–∫–∏ —Å–≤—è–∑–∞–Ω—ã —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ furnace_id
            - –ü–∞—Ä—Ç–∏–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞–≤–∫–∏ —á–µ—Ä–µ–∑ batch_id
            """)
        
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ö–µ–º—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", key="db_continue_btn"):
            st.session_state.db_configured = True
            st.rerun()
        
        st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
    
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (7 –¥–Ω–µ–π)", key="generate_test_data_btn"):
            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                db_manager = DatabaseManager(
                    dbname="digital_twin",
                    user="postgres",
                    password="omgssmyalg",
                    host="localhost",
                    port="5432"
                )
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
                db_manager.create_sensor_tables()

                success = db_manager.generate_test_data()
                db_manager.close()
                
                if success:
                    st.success("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
                else:
                    st.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", key="clear_data_btn", type="secondary"):
            try:
                db_manager = DatabaseManager(
                    dbname="digital_twin",
                    user="postgres",
                    password="omgssmyalg",
                )
                db_manager.cursor.execute("TRUNCATE TABLE steel_melting_data, equipment_status, production_quality CASCADE")
                db_manager.conn.commit()
                db_manager.close()
                st.success("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    def setup_twin_tab(self):
        st.header("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞")
        
        if 'db_schema' not in st.session_state:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ")
            return
        
        exact_config = {
            "components": [
                {
                    "name": "crystallizer_monitoring",
                    "type": "data_collection",
                    "sensors": ["temperature", "casting_speed", "cooling_water_flow", "vibration"]
                },
                {
                    "name": "slab_quality_analysis",
                    "type": "analytics",
                    "analytics": [
                        "defect_prediction",
                        "crystallization_quality",
                        "chemical_composition_analysis"
                    ]
                },
                {
                    "name": "equipment_wear_analysis",
                    "type": "ml_module",
                    "models": [
                        "crystallizer_wear_prediction",
                        "roller_wear_estimation",
                        "maintenance_optimization"
                    ]
                },
                {
                    "name": "casting_control_dashboard",
                    "type": "visualization",
                    "widgets": [
                        "realtime_temperature_chart",
                        "casting_speed_optimizer",
                        "cooling_water_flow_monitor",
                        "vibration_analysis",
                        "slab_quality_metrics",
                        "equipment_health_status"
                    ]
                }
            ],
            "data_flows": [
                {
                    "from": "crystallizer_monitoring",
                    "to": "database",
                    "protocol": "OPC-UA",
                    "frequency": "3s"
                },
                {
                    "from": "database",
                    "to": "slab_quality_analysis",
                    "protocol": "gRPC",
                    "frequency": "10s"
                },
                {
                    "from": "database",
                    "to": "equipment_wear_analysis",
                    "protocol": "REST",
                    "frequency": "hourly"
                },
                {
                    "from": "slab_quality_analysis",
                    "to": "casting_control_dashboard",
                    "protocol": "WebSocket",
                    "frequency": "realtime"
                }
            ],
            "visualization": {
                "layout": "continuous_casting_operator",
                "refresh_rate": 3000,
                "alerts": [
                    {"parameter": "crystallizer_temperature", "threshold": 1520, "condition": ">"},
                    {"parameter": "casting_speed", "threshold": 1.8, "condition": "<"},
                    {"parameter": "cooling_water_flow", "threshold": 1200, "condition": "<"},
                    {"parameter": "vibration_level", "threshold": 4.2, "condition": ">"}
                ],
                "kpis": [
                    "slab_defect_rate",
                    "casting_speed_efficiency",
                    "equipment_uptime",
                    "cooling_water_usage_per_ton"
                ]
            }
        }
        
        if 'twin_config' not in st.session_state:
            st.session_state.twin_config = exact_config
        
        st.subheader("–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        st.json(st.session_state.db_schema, expanded=False)
        
        st.subheader("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞")
        st.json(exact_config, expanded=True)
        
        with st.expander("–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞"):
            st.markdown("""
            ### –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —É—á–∞—Å—Ç–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–∑–ª–∏–≤–∫–∏ —Å—Ç–∞–ª–∏:
            
            **1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Å—Ç–∞–ª–ª–∏–∑–∞—Ç–æ—Ä–∞ (crystallizer_monitoring):**
            - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Ä–º–æ–ø–∞—Ä: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ç–∞–ª–∏ –≤ –∫—Ä–∏—Å—Ç–∞–ª–ª–∏–∑–∞—Ç–æ—Ä–µ
            - –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏–≤–∫–∏ —Å –¥–∞—Ç—á–∏–∫–æ–≤ –≤–∞–ª–∫–æ–≤
            - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞—Å—Ö–æ–¥–∞ –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π –≤–æ–¥—ã
            - –ê–Ω–∞–ª–∏–∑ –≤–∏–±—Ä–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            - –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 3 —Å–µ–∫—É–Ω–¥—ã
            
            **2. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–ª—è–±–æ–≤ (slab_quality_analysis):**
            - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ (—Ä–∞–∫–æ–≤–∏–Ω—ã, —Ç—Ä–µ—â–∏–Ω—ã)
            - –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–∏–∑–∞—Ü–∏–∏
            - –ê–Ω–∞–ª–∏–∑ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ —Å—Ç–∞–ª–∏
            - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            
            **3. –ê–Ω–∞–ª–∏–∑ –∏–∑–Ω–æ—Å–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (equipment_wear_analysis):**
            - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–Ω–æ—Å–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–∏–∑–∞—Ç–æ—Ä–∞
            - –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—è–Ω—É—â–∏—Ö –≤–∞–ª–∫–æ–≤
            - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–º–µ–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            
            **4. –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–ª–∏–≤–∫–æ–π (casting_control_dashboard):**
            - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å—Ç–∞–ª–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            - –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏–≤–∫–∏
            - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞—Å—Ö–æ–¥–∞ –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π –≤–æ–¥—ã
            - –ê–Ω–∞–ª–∏–∑ –≤–∏–±—Ä–∞—Ü–∏–∏ –≤–∞–ª–∫–æ–≤
            - –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–ª—è–±–æ–≤
            - –°—Ç–∞—Ç—É—Å –∏–∑–Ω–æ—Å–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            """)
        
        mode = st.radio("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å–µ–Ω—Å–æ—Ä–æ–≤", 
                    ["–°–∏–º—É–ª—è—Ü–∏—è", "–†–µ–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"], 
                    index=0,
                    key="sensor_mode_radio")
        sensor_mode = 'sim' if mode == "–°–∏–º—É–ª—è—Ü–∏—è" else 'real'
        
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫", key="start_twin_btn"):
            try:
                self.sensor_manager = SensorManager(mode=sensor_mode)
                self.sensor_manager.start()
                
                self.db_manager = DatabaseManager(
                    dbname="digital_twin",
                    user="postgres",
                    password="omgssmyalg"
                )
                self.db_manager.create_sensor_tables()
                
                st.session_state.sensor_running = True
                st.session_state.sensor_mode = sensor_mode
                st.success("–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
        
        if st.button("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫", 
                    disabled=not st.session_state.get('sensor_running', False),
                    key="stop_twin_btn"):
            self.sensor_manager.stop()
            if self.db_manager:
                self.db_manager.close()
            st.session_state.sensor_running = False
            st.success("–†–∞–±–æ—Ç–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def setup_sensor_tab(self):
        st.header("–ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫
        if not st.session_state.get('sensor_running', False) or self.sensor_manager is None:
            st.warning("–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ó–∞–ø—É—Å–∫ –¥–≤–æ–π–Ω–∏–∫–∞'.")
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ —Å–µ–Ω—Å–æ—Ä–æ–≤
        current_mode = st.session_state.get('sensor_mode', 'sim')
        new_mode = st.radio("–†–µ–∂–∏–º —Å–µ–Ω—Å–æ—Ä–æ–≤", 
                        ["–°–∏–º—É–ª—è—Ü–∏—è", "–†–µ–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"],
                        index=0 if current_mode == 'sim' else 1,
                        key="sensor_toggle_radio")
        
        if (new_mode == "–°–∏–º—É–ª—è—Ü–∏—è" and current_mode != 'sim') or \
        (new_mode == "–†–µ–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ" and current_mode == 'sim'):
            try:
                self.sensor_manager.set_mode('sim' if new_mode == "–°–∏–º—É–ª—è—Ü–∏—è" else 'real')
                st.session_state.sensor_mode = 'sim' if new_mode == "–°–∏–º—É–ª—è—Ü–∏—è" else 'real'
                st.experimental_rerun()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞: {str(e)}")
                return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            data = self.sensor_manager.get_data()
            if data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
                if self.db_manager:
                    try:
                        self.db_manager.store_sensor_data(data)
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –±–∞–∑—ã
                sensor_data = data["sensor_data"]
                
                # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_data = []
                
                # –î–∞–Ω–Ω—ã–µ –ø–ª–∞–≤–∫–∏ —Å—Ç–∞–ª–∏ (steel_melting_data)
                if "temperature" in sensor_data:
                    display_data.append({"–ü–∞—Ä–∞–º–µ—Ç—Ä": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ç–∞–ª–∏", "–ó–Ω–∞—á–µ–Ω–∏–µ": sensor_data["temperature"], "–ï–¥–∏–Ω–∏—Ü–∞": "¬∞C"})
                if "vibration_level" in sensor_data:
                    display_data.append({"–ü–∞—Ä–∞–º–µ—Ç—Ä": "–£—Ä–æ–≤–µ–Ω—å –≤–∏–±—Ä–∞—Ü–∏–∏", "–ó–Ω–∞—á–µ–Ω–∏–µ": sensor_data["vibration_level"], "–ï–¥–∏–Ω–∏—Ü–∞": "–º/—Å¬≤"})
                if "casting_speed" in sensor_data:
                    display_data.append({"–ü–∞—Ä–∞–º–µ—Ç—Ä": "–°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑–ª–∏–≤–∫–∏", "–ó–Ω–∞—á–µ–Ω–∏–µ": sensor_data["casting_speed"], "–ï–¥–∏–Ω–∏—Ü–∞": "–º/–º–∏–Ω"})
                if "cooling_water_flow" in sensor_data:
                    display_data.append({"–ü–∞—Ä–∞–º–µ—Ç—Ä": "–†–∞—Å—Ö–æ–¥ –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π –≤–æ–¥—ã", "–ó–Ω–∞—á–µ–Ω–∏–µ": sensor_data["cooling_water_flow"], "–ï–¥–∏–Ω–∏—Ü–∞": "–ª/–º–∏–Ω"})
                
                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (equipment_status)
                if "equipment_status" in sensor_data:
                    display_data.append({"–ü–∞—Ä–∞–º–µ—Ç—Ä": "–°—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", "–ó–Ω–∞—á–µ–Ω–∏–µ": sensor_data["equipment_status"], "–ï–¥–∏–Ω–∏—Ü–∞": ""})
                if "wear_level" in sensor_data:
                    display_data.append({"–ü–∞—Ä–∞–º–µ—Ç—Ä": "–£—Ä–æ–≤–µ–Ω—å –∏–∑–Ω–æ—Å–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ": sensor_data["wear_level"], "–ï–¥–∏–Ω–∏—Ü–∞": "%"})
                
                # –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ (production_quality)
                if "defect_count" in sensor_data:
                    display_data.append({"–ü–∞—Ä–∞–º–µ—Ç—Ä": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤", "–ó–Ω–∞—á–µ–Ω–∏–µ": sensor_data["defect_count"], "–ï–¥–∏–Ω–∏—Ü–∞": "—à—Ç"})
                if "quality_score" in sensor_data:
                    display_data.append({"–ü–∞—Ä–∞–º–µ—Ç—Ä": "–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ": sensor_data["quality_score"], "–ï–¥–∏–Ω–∏—Ü–∞": "/100"})
                
                sensor_df = pd.DataFrame(display_data)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
                st.subheader("–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤")
                st.dataframe(sensor_df)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö
                if "temperature" in sensor_data:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö
                    st.session_state.temperature_history.append({
                        "timestamp": datetime.fromtimestamp(data["timestamp"]),
                        "value": sensor_data["temperature"]
                    })
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç–æ—á–µ–∫
                    if len(st.session_state.temperature_history) > 100:
                        st.session_state.temperature_history = st.session_state.temperature_history[-100:]
                
                if "vibration_level" in sensor_data:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö
                    st.session_state.vibration_history.append({
                        "timestamp": datetime.fromtimestamp(data["timestamp"]),
                        "value": sensor_data["vibration_level"]
                    })
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç–æ—á–µ–∫
                    if len(st.session_state.vibration_history) > 100:
                        st.session_state.vibration_history = st.session_state.vibration_history[-100:]
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                col1, col2 = st.columns(2)
                
                # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å—Ç–∞–ª–∏
                with col1:
                    # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    if st.session_state.temperature_history:
                        temp_df = pd.DataFrame(st.session_state.temperature_history)
                    else:
                        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –Ω—É–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                        temp_df = pd.DataFrame(columns=["timestamp", "value"])
                    
                    fig_temp = px.line(
                        temp_df,
                        x="timestamp",
                        y="value",
                        title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ç–∞–ª–∏, ¬∞C",
                        labels={"value": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "timestamp": "–í—Ä–µ–º—è"},
                        height=300
                    )
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥
                    fig_temp.add_hline(
                        y=1520, 
                        line_dash="dash", 
                        line_color="red",
                        annotation_text="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥",
                        annotation_position="bottom right"
                    )
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Å–µ–π –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
                    if temp_df.empty:
                        fig_temp.update_yaxes(range=[1500, 1600])
                        fig_temp.update_xaxes(range=[datetime.now() - timedelta(minutes=10), datetime.now()])
                    st.plotly_chart(fig_temp, use_container_width=True)

                # –ì—Ä–∞—Ñ–∏–∫ –≤–∏–±—Ä–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                with col2:
                    # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∏–±—Ä–∞—Ü–∏–∏
                    if st.session_state.vibration_history:
                        vib_df = pd.DataFrame(st.session_state.vibration_history)
                    else:
                        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –Ω—É–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                        vib_df = pd.DataFrame(columns=["timestamp", "value"])
                    
                    fig_vib = px.line(
                        vib_df,
                        x="timestamp",
                        y="value",
                        title="–í–∏–±—Ä–∞—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –º/—Å¬≤",
                        labels={"value": "–í–∏–±—Ä–∞—Ü–∏—è", "timestamp": "–í—Ä–µ–º—è"},
                        height=300
                    )
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥
                    fig_vib.add_hline(
                        y=4.2, 
                        line_dash="dash", 
                        line_color="red",
                        annotation_text="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥",
                        annotation_position="bottom right"
                    )
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Å–µ–π –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
                    if vib_df.empty:
                        fig_vib.update_yaxes(range=[0, 10])
                        fig_vib.update_xaxes(range=[datetime.now() - timedelta(minutes=10), datetime.now()])
                    st.plotly_chart(fig_vib, use_container_width=True)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–≤–æ–π–Ω–∏–∫–∞
                critical_alerts = []
                if "temperature" in sensor_data and sensor_data["temperature"] > 1520:
                    critical_alerts.append(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è: {sensor_data['temperature']:.1f}¬∞C")
                
                if "vibration_level" in sensor_data and sensor_data["vibration_level"] > 4.2:
                    critical_alerts.append(f"–í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∞: {sensor_data['vibration_level']:.2f} –º/—Å¬≤")
                
                if "cooling_water_flow" in sensor_data and sensor_data["cooling_water_flow"] < 1200:
                    critical_alerts.append(f"–†–∞—Å—Ö–æ–¥ –≤–æ–¥—ã –Ω–∏–∑–∫–∏–π: {sensor_data['cooling_water_flow']:.0f} –ª/–º–∏–Ω")
                
                if "casting_speed" in sensor_data and sensor_data["casting_speed"] < 1.8:
                    critical_alerts.append(f"–°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑–ª–∏–≤–∫–∏ –Ω–∏–∑–∫–∞—è: {sensor_data['casting_speed']:.2f} –º/–º–∏–Ω")
                
                if critical_alerts:
                    st.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
                    for alert in critical_alerts:
                        st.markdown(f"‚ö†Ô∏è {alert}")
                
                # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ production_quality
                st.subheader("–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
                quality_cols = st.columns(3)
                with quality_cols[0]:
                    defect_count = sensor_data.get("defect_count", 0)
                    st.metric("–î–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –ø–∞—Ä—Ç–∏—é", f"{defect_count} —à—Ç", help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–µ–∫—Ç–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π –≤ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—Ç–∏–∏")
                
                with quality_cols[1]:
                    quality_score = sensor_data.get("quality_score", 0)
                    st.metric("–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞", f"{quality_score:.1f}/100", help="–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
                
                with quality_cols[2]:
                    if "casting_speed" in sensor_data:
                        st.metric("–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", f"{sensor_data['casting_speed']:.2f} –º/–º–∏–Ω")
                
                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–∑ equipment_status
                st.subheader("–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
                equipment_cols = st.columns(2)
                with equipment_cols[0]:
                    if "wear_level" in sensor_data:
                        wear = sensor_data["wear_level"]
                        wear_status = "–ù–æ—Ä–º–∞" if wear < 70 else "–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π" if wear < 85 else "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"
                        st.metric("–£—Ä–æ–≤–µ–Ω—å –∏–∑–Ω–æ—Å–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–∏–∑–∞—Ç–æ—Ä–∞", f"{wear:.1f}%", wear_status)
                
                with equipment_cols[1]:
                    if "equipment_status" in sensor_data:
                        status = sensor_data["equipment_status"]
                        status_color = "green" if status == "normal" else "orange" if status == "warning" else "red"
                        st.metric("–°—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", status, delta=None, delta_color=status_color)
                
                # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã
                time_range = st.selectbox("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", 
                                        ["15 –º–∏–Ω—É—Ç", "1 —á–∞—Å", "–°–º–µ–Ω–∞ (8 —á–∞—Å–æ–≤)"],
                                        key="time_range_select")
                minutes = 15 if time_range == "15 –º–∏–Ω—É—Ç" else 60 if time_range == "1 —á–∞—Å" else 480
                self.display_historical_data(minutes)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    def display_historical_data(self, minutes):
        """Display historical data from all tables"""
        try:
            time_threshold = datetime.now() - timedelta(minutes=minutes)
            
            # Steel Melting Data
            melting_query = """SELECT 
                    timestamp,
                    temperature,
                    vibration_level AS vibration,
                    furnace_id
                FROM steel_melting_data 
                WHERE timestamp >= %s
                ORDER BY timestamp"""
            
            self.db_manager.cursor.execute(melting_query, (time_threshold,))
            melting_results = self.db_manager.cursor.fetchall()
            
            # Equipment Status
            equipment_query = """SELECT 
                    timestamp,
                    wear_level,
                    status
                FROM equipment_status 
                WHERE timestamp >= %s
                ORDER BY timestamp"""
            
            self.db_manager.cursor.execute(equipment_query, (time_threshold,))
            equipment_results = self.db_manager.cursor.fetchall()
            
            # Production Quality
            quality_query = """SELECT 
                    timestamp,
                    defect_count,
                    quality_score
                FROM production_quality 
                WHERE timestamp >= %s
                ORDER BY timestamp"""
            
            self.db_manager.cursor.execute(quality_query, (time_threshold,))
            quality_results = self.db_manager.cursor.fetchall()
            
            # Display data if available
            if melting_results or equipment_results or quality_results:
                st.subheader(f"–î–∞–Ω–Ω—ã–µ –∑–∞ {minutes} –º–∏–Ω—É—Ç")
                
                # Steel Melting Data Visualization
                if melting_results:
                    melting_df = pd.DataFrame(
                        melting_results, 
                        columns=["–í—Ä–µ–º—è", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–í–∏–±—Ä–∞—Ü–∏—è", "–ü–µ—á—å"]
                    )
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        fig_temp = px.line(
                            melting_df,
                            x="–í—Ä–µ–º—è",
                            y="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                            title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ç–∞–ª–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
                            color="–ü–µ—á—å"
                        )
                        st.plotly_chart(fig_temp, use_container_width=True)
                    
                    with col2:
                        fig_vib = px.line(
                            melting_df,
                            x="–í—Ä–µ–º—è",
                            y="–í–∏–±—Ä–∞—Ü–∏—è",
                            title="–í–∏–±—Ä–∞—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
                            color="–ü–µ—á—å"
                        )
                        st.plotly_chart(fig_vib, use_container_width=True)
                
                # Equipment Status Visualization
                if equipment_results:
                    equipment_df = pd.DataFrame(
                        equipment_results, 
                        columns=["–í—Ä–µ–º—è", "–ò–∑–Ω–æ—Å", "–°—Ç–∞—Ç—É—Å"]
                    )
                    
                    fig_wear = px.line(
                        equipment_df,
                        x="–í—Ä–µ–º—è",
                        y="–ò–∑–Ω–æ—Å",
                        title="–£—Ä–æ–≤–µ–Ω—å –∏–∑–Ω–æ—Å–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
                        color="–°—Ç–∞—Ç—É—Å"
                    )
                    st.plotly_chart(fig_wear, use_container_width=True)
                
                # Production Quality Visualization
                if quality_results:
                    quality_df = pd.DataFrame(
                        quality_results, 
                        columns=["–í—Ä–µ–º—è", "–î–µ—Ñ–µ–∫—Ç—ã", "–ö–∞—á–µ—Å—Ç–≤–æ"]
                    )
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        fig_defects = px.bar(
                            quality_df,
                            x="–í—Ä–µ–º—è",
                            y="–î–µ—Ñ–µ–∫—Ç—ã",
                            title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ –ø–∞—Ä—Ç–∏—è–º"
                        )
                        st.plotly_chart(fig_defects, use_container_width=True)
                    
                    with col2:
                        fig_quality = px.line(
                            quality_df,
                            x="–í—Ä–µ–º—è",
                            y="–ö–∞—á–µ—Å—Ç–≤–æ",
                            title="–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏"
                        )
                        st.plotly_chart(fig_quality, use_container_width=True)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


def main():
    interface = DigitalTwinInterface()

if __name__ == "__main__":
    main()