import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import json
from cores.database import DatabaseManager
from cores.sensor_manager import SensorManager
from agents.user_interaction_agent import UserInteractionAgent
from agents.database_agent import DatabaseAgent
from agents.digital_twin_agent import DigitalTwinAgent


class DigitalTwinInterface:
    def __init__(self):
        self.ui_agent = UserInteractionAgent()
        self.db_agent = DatabaseAgent()
        self.dt_agent = DigitalTwinAgent()
        self.sensor_manager = None
        self.db_manager = None
        if 'twin_initialized' not in st.session_state:
            st.session_state.twin_initialized = False

        if 'temperature_history' not in st.session_state:
            st.session_state.temperature_history = []
            
        if 'vibration_history' not in st.session_state:
            st.session_state.vibration_history = []
        
        self.setup_ui()


    def setup_ui(self):
        st.set_page_config(page_title="Digital Twin Builder", layout="wide")
        st.title("Digital Twin Builderüè≠")
        
        self.tab1, self.tab2, self.tab3, self.tab4 = st.tabs([
            "–ò–Ω—Ç–µ—Ä–≤—å—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", 
            "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", 
            "–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫",
            "–û–±–∑–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–∞—Ç—á–∏–∫–æ–≤"
        ])
        
        with self.tab1:
            self.setup_interview_tab()
        with self.tab2:
            self.setup_database_tab()
        with self.tab3:
            self.setup_twin_tab()
        with self.tab4:
            self.setup_sensor_tab()

    def setup_interview_tab(self):
        st.header("–°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
        
        if 'chat_history' not in st.session_state:
            st.session_state.chat_history = []
            st.session_state.interview_state = {
                'current_topic': None,
                'completed_topics': [],
                'collected_data': {},
                'awaiting_response': False
            }
            
            initial_response = self._get_initial_interview_questions()
            st.session_state.chat_history.append({
                "role": "bot", 
                "content": initial_response
            })
        
        for message in st.session_state.chat_history:
            role = "assistant" if message["role"] == "bot" else "user"
            with st.chat_message(role):
                st.markdown(message["content"])
        
        if not st.session_state.get('interview_completed', False):
            user_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ...")
            
            if user_input:
                st.session_state.chat_history.append({"role": "user", "content": user_input})
                
                bot_response = self._get_next_interview_question(user_input)
                
                if st.session_state.interview_state.get('interview_completed'):
                    bot_response += "\n\n–°–ø–∞—Å–∏–±–æ! –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
                    st.session_state.interview_completed = True
                    st.session_state.interview_result = st.session_state.interview_state['collected_data']
                
                st.session_state.chat_history.append({"role": "bot", "content": bot_response})
                st.rerun()
        else:
            st.success("–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–µ.")
            with st.expander("–°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
                st.json(st.session_state.interview_result)

    def _get_initial_interview_questions(self):
        return """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:Add commentMore actions
            
            1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–∫—Ç–∞
            2. –¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞
            3. –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            4. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –∏ —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            5. –û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—èAdd commentMore actions
            
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞."""

    def _get_next_interview_question(self, user_input):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

        current_state = st.session_state.interview_state
        topics = [
            "general_info",
            "production_processes",
            "data_monitoring",
            "twin_requirements"
        ]
        
        if not current_state['current_topic']:
            current_topic = topics[0]
            current_state['current_topic'] = current_topic
            current_state['collected_data'][current_topic] = []
        
        current_state['collected_data'][current_state['current_topic']].append(user_input)
        
        questions = {
            "general_info": [
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è",
                "–ö–∞–∫–æ–≤—ã –ø–ª–æ—â–∞–¥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –∫–∞–∫ –æ–Ω–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã?",
                "–°–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏?"
            ],
            "production_processes": [
                "–û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
                "–ö–∞–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–º?",
                "–ö–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ç—Ä–µ–±—É—é—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è?"
            ],
            "data_monitoring": [
                "–ö–∞–∫–∏–µ –¥–∞—Ç—á–∏–∫–∏ –∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã?",
                "–ö–∞–∫ —á–∞—Å—Ç–æ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è?",
                "–ì–¥–µ –∏ –∫–∞–∫ —Ö—Ä–∞–Ω—è—Ç—Å—è —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?"
            ],
            "twin_requirements": [
                "–ö–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º –¥–≤–æ–π–Ω–∏–∫–µ?",
                "–ö–∞–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?",
                "–ù—É–∂–Ω–∞ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è?"
            ]
        }
        
        topic_questions = questions[current_state['current_topic']]
        
        asked_count = len(current_state['collected_data'][current_state['current_topic']])
        
        if asked_count < len(topic_questions):
            return topic_questions[asked_count]
        else:
            current_idx = topics.index(current_state['current_topic'])
            if current_idx + 1 < len(topics):
                current_state['current_topic'] = topics[current_idx + 1]
                current_state['collected_data'][current_state['current_topic']] = []
                return questions[current_state['current_topic']][0]
            else:
                current_state['interview_completed'] = True
                return "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!"
            

    def setup_database_tab(self):
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        if 'interview_result' not in st.session_state:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ò–Ω—Ç–µ—Ä–≤—å—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'")
            return
        
        if 'db_schema' not in st.session_state:

            db_schema = self.db_agent.generate_schema(st.session_state.interview_result)
            st.session_state.db_schema = db_schema
        
        st.subheader("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        st.json(st.session_state.db_schema)
        
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ö–µ–º—É"):
            st.session_state.db_configured = True
            st.success("–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

    def setup_twin_tab(self):
        st.header("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞")
        
        if 'db_schema' not in st.session_state:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ")
            return
        
        if 'twin_config' not in st.session_state:

            twin_config = self.dt_agent.configure_twin(
                st.session_state.interview_result,
                st.session_state.db_schema
            )
            st.session_state.twin_config = twin_config
        
        st.subheader("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞")
        st.json(st.session_state.twin_config)
        
        mode = st.radio("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", ["–°–∏–º—É–ª—è—Ü–∏—è", "–†–µ–∞–ª—å–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏"])
        
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫"):
            try:
                self.sensor_manager = SensorManager(mode='sim' if mode == "–°–∏–º—É–ª—è—Ü–∏—è" else 'real')
                self.sensor_manager.start()
                
                self.db_manager = DatabaseManager(
                    dbname="digital_twin",
                    user="postgres",
                    password="omgssmyalg"
                )
                self.db_manager.create_sensor_tables()
                
                st.session_state.sensor_running = True
                st.success("–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
        
        if st.button("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", disabled=not st.session_state.get('sensor_running', False)):
            self.sensor_manager.stop()
            if self.db_manager:
                self.db_manager.close()
            st.session_state.sensor_running = False
            st.success("–†–∞–±–æ—Ç–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def setup_sensor_tab(self):
        st.header("–ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        if not st.session_state.get('sensor_running', False):
            st.warning("–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        data = self.sensor_manager.get_data()
        if data:
            self.display_sensor_data(data)
    
    def setup_sensor_tab(self):
        st.header("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
        
        if not st.session_state.get('sensor_running', False):
            st.warning("–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        data = self.sensor_manager.get_data()
        if data:
            self.display_sensor_data(data)
    
    def display_sensor_data(self, data):
        st.subheader("–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è")
        
        sensor_data = data["sensor_data"]
        display_data = []
        
        for param, value in sensor_data.items():
            display_data.append({
                "–ü–∞—Ä–∞–º–µ—Ç—Ä": param,
                "–ó–Ω–∞—á–µ–Ω–∏–µ": value,
                "–í—Ä–µ–º—è": datetime.fromtimestamp(data["timestamp"])
            })
        
        st.dataframe(pd.DataFrame(display_data))
        
        self.plot_sensor_data(data)
    
    def plot_sensor_data(self, data):
        col1, col2 = st.columns(2)
        
        with col1:
            st.session_state.temperature_history.append({
                "timestamp": datetime.fromtimestamp(data["timestamp"]),
                "value": data["sensor_data"].get("temperature", 0)
            })
            temp_df = pd.DataFrame(st.session_state.temperature_history[-100:])
            fig_temp = px.line(temp_df, x="timestamp", y="value", title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
            st.plotly_chart(fig_temp, use_container_width=True)
        
        with col2:
            st.session_state.vibration_history.append({
                "timestamp": datetime.fromtimestamp(data["timestamp"]),
                "value": data["sensor_data"].get("vibration", 0)
            })
            vib_df = pd.DataFrame(st.session_state.vibration_history[-100:])
            fig_vib = px.line(vib_df, x="timestamp", y="value", title="–í–∏–±—Ä–∞—Ü–∏—è")
            st.plotly_chart(fig_vib, use_container_width=True)

def main():
    interface = DigitalTwinInterface()

if __name__ == "__main__":
    main()