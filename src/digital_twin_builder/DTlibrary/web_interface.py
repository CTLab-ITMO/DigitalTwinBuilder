import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import json
from cores.database import DatabaseManager
from cores.sensor_manager import SensorManager
from agents.user_interaction_agent import UserInteractionAgent
from agents.database_agent import DatabaseAgent
from agents.digital_twin_agent import DigitalTwinAgent


class DigitalTwinInterface:
    def __init__(self):
        self.ui_agent = UserInteractionAgent()
        self.db_agent = DatabaseAgent()
        self.dt_agent = DigitalTwinAgent()
        self.sensor_manager = None
        self.db_manager = None
        if 'twin_initialized' not in st.session_state:
            st.session_state.twin_initialized = False

        if 'temperature_history' not in st.session_state:
            st.session_state.temperature_history = []
            
        if 'vibration_history' not in st.session_state:
            st.session_state.vibration_history = []
        
        self.setup_ui()


    def setup_ui(self):
        st.set_page_config(page_title="Digital Twin Builder", layout="wide")
        st.title("Digital Twin Builderüè≠")
        
        self.tab1, self.tab2, self.tab3, self.tab4 = st.tabs([
            "–ò–Ω—Ç–µ—Ä–≤—å—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", 
            "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", 
            "–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫",
            "–û–±–∑–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–∞—Ç—á–∏–∫–æ–≤"
        ])
        
        with self.tab1:
            self.setup_interview_tab()
        with self.tab2:
            self.setup_database_tab()
        with self.tab3:
            self.setup_twin_tab()
        with self.tab4:
            self.setup_sensor_tab()

    def setup_interview_tab(self):
        st.header("–°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
        
        if 'chat_history' not in st.session_state:
            st.session_state.chat_history = []
            st.session_state.interview_state = {
                'current_topic': None,
                'completed_topics': [],
                'collected_data': {},
                'awaiting_response': False
            }
            
            initial_response = self.ui_agent.conduct_interview()
            st.session_state.chat_history.append({
                "role": "bot", 
                "content": initial_response["initial_response"]
            })
        
        for message in st.session_state.chat_history:
            role = "assistant" if message["role"] == "bot" else "user"
            with st.chat_message(role):
                st.markdown(message["content"])
        
        if not st.session_state.get('interview_completed', False):
            user_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ...")
            
            if user_input:
                st.session_state.chat_history.append({"role": "user", "content": user_input})
                
                current_topic = st.session_state.interview_state['current_topic']
                if current_topic:
                    st.session_state.interview_state['collected_data'].setdefault(current_topic, []).append(user_input)
                
                prompt = self._build_interview_prompt(
                    st.session_state.interview_state,
                    user_input
                )
                
                try:
                    response = self.ui_agent.model(
                        prompt,
                        max_length=2048,
                        num_return_sequences=1
                    )[0]['generated_text']
                    
                    bot_response, interview_state_update = self._process_agent_response(
                        response,
                        st.session_state.interview_state
                    )
                    
                    st.session_state.interview_state.update(interview_state_update)
                    
                    if len(st.session_state.interview_state['completed_topics']) == 4:
                        st.session_state.interview_completed = True
                        st.session_state.interview_result = {
                            "general_info": "\n".join(st.session_state.interview_state['collected_data'].get("general_info", [])),
                            "production_processes": "\n".join(st.session_state.interview_state['collected_data'].get("production_processes", [])),
                            "data_monitoring": "\n".join(st.session_state.interview_state['collected_data'].get("data_monitoring", [])),
                            "twin_requirements": "\n".join(st.session_state.interview_state['collected_data'].get("twin_requirements", []))
                        }
                        bot_response += "\n\n–°–ø–∞—Å–∏–±–æ! –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
                    
                    st.session_state.chat_history.append({"role": "bot", "content": bot_response})
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
                
                st.rerun()
        else:
            st.success("–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–µ.")
            with st.expander("–°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
                st.json(st.session_state.interview_result)


    def _build_interview_prompt(self, interview_state, user_input):
        """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é"""
        topics = {
            "general_info": "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏",
            "production_processes": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã",
            "data_monitoring": "–î–∞–Ω–Ω—ã–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
            "twin_requirements": "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É –¥–≤–æ–π–Ω–∏–∫—É"
        }
        
        current_topic = interview_state['current_topic']
        if not current_topic or current_topic in interview_state['completed_topics']:
            for topic in topics:
                if topic not in interview_state['completed_topics']:
                    current_topic = topic
                    break
        
        prompt = f"""–¢—ã –ø—Ä–æ–≤–æ–¥–∏—à—å –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {topics[current_topic]}.
        
    –£–∂–µ —Å–æ–±—Ä–∞–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
    {json.dumps(interview_state['collected_data'], ensure_ascii=False, indent=2)}

    –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_input}

    –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏, –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∫—Ä–∞—Ç–∫–æ —Å—É–º–º–∏—Ä—É–π —Å–æ–±—Ä–∞–Ω–Ω–æ–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ.
    –ò—Å–ø–æ–ª—å–∑—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
        
        return prompt

    def _process_agent_response(self, response, current_state):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        topic_completed = "—Å–ª–µ–¥—É—é—â" in response.lower() or "–ø–µ—Ä–µ–π–¥" in response.lower()
        
        update = {}
        if topic_completed:
            update['completed_topics'] = current_state['completed_topics'] + [current_state['current_topic']]
            update['current_topic'] = None
        else:
            update['current_topic'] = current_state['current_topic']
        
        return response, update

    def setup_database_tab(self):
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        if 'interview_result' not in st.session_state:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ò–Ω—Ç–µ—Ä–≤—å—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'")
            return
        
        if 'db_schema' not in st.session_state:

            db_schema = self.db_agent.generate_schema(st.session_state.interview_result)
            st.session_state.db_schema = db_schema
        
        st.subheader("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        st.json(st.session_state.db_schema)
        
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ö–µ–º—É"):
            st.session_state.db_configured = True
            st.success("–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

    def setup_twin_tab(self):
        st.header("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞")
        
        if 'db_schema' not in st.session_state:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ")
            return
        
        if 'twin_config' not in st.session_state:

            twin_config = self.dt_agent.configure_twin(
                st.session_state.interview_result,
                st.session_state.db_schema
            )
            st.session_state.twin_config = twin_config
        
        st.subheader("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞")
        st.json(st.session_state.twin_config)
        
        mode = st.radio("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", ["–°–∏–º—É–ª—è—Ü–∏—è", "–†–µ–∞–ª—å–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏"])
        
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫"):
            try:
                self.sensor_manager = SensorManager(mode='sim' if mode == "–°–∏–º—É–ª—è—Ü–∏—è" else 'real')
                self.sensor_manager.start()
                
                self.db_manager = DatabaseManager(
                    dbname="digital_twin",
                    user="postgres",
                    password="omgssmyalg"
                )
                self.db_manager.create_sensor_tables()
                
                st.session_state.sensor_running = True
                st.success("–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
        
        if st.button("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", disabled=not st.session_state.get('sensor_running', False)):
            self.sensor_manager.stop()
            if self.db_manager:
                self.db_manager.close()
            st.session_state.sensor_running = False
            st.success("–†–∞–±–æ—Ç–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def setup_sensor_tab(self):
        st.header("–ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        if not st.session_state.get('sensor_running', False):
            st.warning("–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        data = self.sensor_manager.get_data()
        if data:
            self.display_sensor_data(data)
    
    def setup_sensor_tab(self):
        st.header("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
        
        if not st.session_state.get('sensor_running', False):
            st.warning("–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        data = self.sensor_manager.get_data()
        if data:
            self.display_sensor_data(data)
    
    def display_sensor_data(self, data):
        st.subheader("–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è")
        
        sensor_data = data["sensor_data"]
        display_data = []
        
        for param, value in sensor_data.items():
            display_data.append({
                "–ü–∞—Ä–∞–º–µ—Ç—Ä": param,
                "–ó–Ω–∞—á–µ–Ω–∏–µ": value,
                "–í—Ä–µ–º—è": datetime.fromtimestamp(data["timestamp"])
            })
        
        st.dataframe(pd.DataFrame(display_data))
        
        self.plot_sensor_data(data)
    
    def plot_sensor_data(self, data):
        col1, col2 = st.columns(2)
        
        with col1:
            st.session_state.temperature_history.append({
                "timestamp": datetime.fromtimestamp(data["timestamp"]),
                "value": data["sensor_data"].get("temperature", 0)
            })
            temp_df = pd.DataFrame(st.session_state.temperature_history[-100:])
            fig_temp = px.line(temp_df, x="timestamp", y="value", title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
            st.plotly_chart(fig_temp, use_container_width=True)
        
        with col2:
            st.session_state.vibration_history.append({
                "timestamp": datetime.fromtimestamp(data["timestamp"]),
                "value": data["sensor_data"].get("vibration", 0)
            })
            vib_df = pd.DataFrame(st.session_state.vibration_history[-100:])
            fig_vib = px.line(vib_df, x="timestamp", y="value", title="–í–∏–±—Ä–∞—Ü–∏—è")
            st.plotly_chart(fig_vib, use_container_width=True)

def main():
    interface = DigitalTwinInterface()

if __name__ == "__main__":
    main()