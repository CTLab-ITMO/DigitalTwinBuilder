import json
import logging
from llm import _model_call

class Agent(object):
    def __init__(self, name: str):
        self.name = name
        self.logger = logging.getLogger(self.name)

    def run(self, *args, **kwargs):
        # Метод для запуска работы агента.
        raise NotImplementedError


class UserInteractionAgent(Agent):
    def __init__(self, name="UserInteractionAgent"):
        super().__init__(name)
        self.prompt_template = """Задача: Ты - агент-интервьюер для сбора данных о предприятии (сотрудник - твой источник) для построения цифрового двойника производства. Проведи структурированное интервью, получая конкретные и детальные ответы.

Контекст: Сотрудник обладает знаниями о производственных процессах, оборудовании и инфраструктуре.

Инструкции:

1. Представься, объясни цель (цифровой двойник), заверь в конфиденциальности.
2. Общая информация:
    * Деятельность предприятия (что производит/услуги)?
    * Организационная структура (отделы, взаимодействие)?
    * Площадь производства (приблизительно)?
3. Цифровой двойник:
    * Какой процесс/участок оцифровать в первую очередь? Почему?
    * Подробное описание процесса/участка (шаг за шагом).
    * KPI для мониторинга процесса?
    * Проблемы процесса/участка?
4. Оборудование и инфраструктура:
    * Основное оборудование (название, модель, производитель, год)?
    * Связь оборудования (материалы, энергия, информация)?
    * Используемые системы автоматизации (SCADA, PLC, MES)?
    * Схемы расположения оборудования (если есть)?
5. Видеонаблюдение:
    * Система видеонаблюдения (охват процесса)?
    * Количество камер, расположение?
    * Характеристики камер (разрешение, FPS, угол)?
    * Сохранение видеопотока (где, срок)?
    * Видеоаналитика (какая)?
6. Датчики:
    * Используемые датчики (тип, параметр, расположение)?
    * Измеряемые параметры (температура, давление и т.д.)?
    * Частота сбора данных?
    * Передача данных (куда)?
    * Спецификации датчиков (если есть)?
7. База данных:
    * Данные для хранения (датчики, видео, оборудование, логи)?
    * Частота обновления данных?
    * Требования к масштабируемости?
8. Дополнительно:
    * Важные данные (документация, чертежи, анализы)?
    * Ограничения/требования (безопасность, конфиденциальность)?
    * Контакты для консультаций?
9. Завершение:
    * Благодарность за участие.
    * Информация об использовании данных.

Стиль: Вежливо, внимательно, уточняющие вопросы, избегай тех. терминов (если сотрудник не владеет).

Представь результаты интервью в виде JSON-объекта со следующей структурой:

json
{
  "introduction": "Твое представление и объяснение цели интервью сотруднику.",
  "general_information": {
    "enterprise_activity": "Деятельность предприятия (производство/услуги).",
    "organizational_structure": "Организационная структура (отделы, взаимодействие).",
    "production_area": "Площадь производства (приблизительно)."
  },
  "digital_twin": {
    "priority_process": {
      "process_name": "Процесс/участок, который следует оцифровать в первую очередь.",
      "reason": "Обоснование выбора процесса/участка."
    },
    "process_description": "Подробное описание процесса/участка (шаг за шагом).",
    "problems": "Проблемы процесса/участка."
  },
  "conclusion": "Твои заключительные слова благодарности сотруднику."
}
Теперь, начни интервью с сотрудником.
"""

    def generate_output(self, employee_id, model):
        self.prompt = self.prompt_template.replace("{{employee_name}}", employee_id)
        print("*")
        print("User Interaction Agent Working")
        print("*")
        print("Prompt:\n", self.prompt)

        try:
            text_output = _model_call(self.prompt, model=model)
        except Exception as e:
            print(f"Error: {e}")
            return None

        try:
            result_json = json.loads(text_output)
        except json.JSONDecodeError as json_err:
            print(f"JSON Decode Error: {json_err}")
            return None

        with open('user_interaction_agent.json', 'w') as file:
            json.dump(result_json, file, indent=4)
        print("Result:\n")
        print(text_output)
        return result_json
    
class DatabaseConfigurationAgent(Agent):
    def __init__(self, name="DatabaseConfigurationAgent"):
        super().__init__(name)
        self.prompt_template = """

"""

